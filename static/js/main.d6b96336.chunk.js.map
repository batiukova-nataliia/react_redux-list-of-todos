{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","filterActions","filterReducer","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","className","TodoList","useState","setTodos","clickedTodoId","setClickedTodoId","dispatch","useEffect","todosFromServer","filteredTodos","isMatchingStatus","completed","trim","title","toLowerCase","includes","some","length","map","isTodoClicked","id","classNames","onClick","currentTodoActions","selectedTodo","TodoFilter","onSubmit","event","preventDefault","value","onChange","selectedFilter","target","placeholder","searchText","style","pointerEvents","TodoModal","user","setUser","userId","href","email","name","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6b96336.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetFilterAll = {\n  type: 'currentTodo/All',\n};\n\ntype SetFilterActive = {\n  type: 'currentTodo/ACTIVE',\n};\n\ntype SetFilterCompleted = {\n  type: 'currentTodo/COMPLETED',\n};\n\ntype SetFilterQuery = {\n  type: 'currentTodo/SET_QUERY',\n  payload: string,\n};\n\nconst setFilterQuery = (query: string): SetFilterQuery => ({\n  type: 'currentTodo/SET_QUERY',\n  payload: query,\n});\n\nconst setActiveTodo = (): SetFilterActive => ({\n  type: 'currentTodo/ACTIVE',\n});\n\nconst setCompletedTodo = (): SetFilterCompleted => ({\n  type: 'currentTodo/COMPLETED',\n});\n\nconst setAllTodos = (): SetFilterAll => ({\n  type: 'currentTodo/All',\n});\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\n\nexport const filterActions = {\n  setActiveTodo, setCompletedTodo, setAllTodos, setFilterQuery,\n};\n\n  type Action = SetFilterActive\n  | SetFilterCompleted\n  | SetFilterAll\n  | SetFilterQuery;\n\nconst filterReducer = (\n  state = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'currentTodo/ACTIVE':\n      return { ...state, status: 'active' };\n    case 'currentTodo/COMPLETED':\n      return { ...state, status: 'completed' };\n    case 'currentTodo/All':\n      return { ...state, status: 'all' };\n    case 'currentTodo/SET_QUERY':\n      return { ...state, query: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\nexport const actions = {};\n\nconst todosReducer = (): Todo[] => {\n  return [];\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nimport { Todo } from '../../types/Todo';\nimport { useAppSelector } from '../../app/hooks';\nimport { getTodos } from '../../api';\nimport { Loader } from '../Loader';\n\nexport const TodoList = (\n) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [clickedTodoId, setClickedTodoId] = useState<number | null>(null);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getTodos().then((todosFromServer) => setTodos(todosFromServer));\n  }, []);\n\n  const filter = useAppSelector((state) => state.filter);\n  const query = useAppSelector((state) => state.filter.query);\n\n  const filteredTodos = todos.filter((todo) => {\n    const isMatchingStatus\n      = (filter.status === 'active' && !todo.completed)\n      || (filter.status === 'completed' && todo.completed)\n      || filter.status === 'all';\n\n    if (isMatchingStatus && query.trim() !== '') {\n      return todo.title.toLowerCase().includes(query.toLowerCase());\n    }\n\n    return isMatchingStatus;\n  });\n\n  const handleViewButtonClick = (selectedTodo: Todo) => {\n    dispatch(currentTodoActions.setTodo(selectedTodo));\n    setClickedTodoId(selectedTodo.id);\n  };\n\n  return (\n    <>\n      {filteredTodos\n        .some((todo) => todo.title\n          .toLowerCase().includes(query.toLowerCase()))\n        ? (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {!filteredTodos.length ? <Loader /> : (\n                filteredTodos.map((todo) => {\n                  const isTodoClicked = todo.id === clickedTodoId;\n\n                  return (\n                    <tr data-cy=\"todo\">\n                      <td className=\"is-vcentered\">{todo.id}</td>\n                      <td className=\"is-vcentered\"> </td>\n\n                      <td className=\"is-vcentered is-expanded\">\n                        <p className={classNames({\n                          'has-text-danger': todo.completed,\n                          'has-text-success': !todo.completed,\n                        })}\n                        >\n                          {todo.title}\n                        </p>\n                      </td>\n\n                      <td className=\"has-text-right is-vcentered\">\n                        <button\n                          data-cy=\"selectButton\"\n                          className=\"button\"\n                          type=\"button\"\n                          onClick={() => handleViewButtonClick(todo)}\n                        >\n                          <span className=\"icon\">\n                            {!isTodoClicked ? (\n                              <i className=\"far fa-eye\" />\n\n                            ) : (\n                              <i className=\"far fa-eye-slash\" />\n\n                            )}\n                          </span>\n                        </button>\n                      </td>\n                    </tr>\n\n                  );\n                })\n\n              )}\n            </tbody>\n          </table>\n\n        ) : (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )}\n\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const filter = useAppSelector((state) => state.filter);\n  const query = useAppSelector((state) => state.filter.query);\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedFilter = event.target.value;\n\n    if (selectedFilter === 'all') {\n      dispatch(filterActions.setAllTodos());\n    } else if (selectedFilter === 'active') {\n      dispatch(filterActions.setActiveTodo());\n      dispatch(filterActions.setFilterQuery(''));\n    } else if (selectedFilter === 'completed') {\n      dispatch(filterActions.setCompletedTodo());\n      dispatch(filterActions.setFilterQuery(''));\n    }\n  };\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const searchText = event.target.value;\n\n    dispatch(filterActions.setFilterQuery(searchText));\n  };\n\n  const handleDeleteQuery = () => {\n    dispatch(filterActions.setFilterQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter.status}\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleSearchChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={handleDeleteQuery}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const closeModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId).then(setUser);\n    }\n  }, []);\n\n  if (!user) {\n    return <Loader />;\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            {`Todo #${currentTodo?.id}`}\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n            onClick={closeModal}\n          />\n        </header>\n\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">\n            {currentTodo?.title}\n          </p>\n\n          <p className=\"block\" data-cy=\"modal-user\">\n            {!currentTodo?.completed ? (\n              <strong className=\"has-text-success\">Done</strong>\n\n            ) : (\n              <strong className=\"has-text-danger\">Planned</strong>\n\n            )}\n            {' by '}\n            <a href={`mailto:${user?.email}`}>\n              {user?.name}\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useAppSelector } from './app/hooks';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <div className=\"section\">\n      <div className=\"container\">\n        <div className=\"box\">\n          <h1 className=\"title\">Todos</h1>\n          <div className=\"block\">\n            <TodoFilter />\n            <TodoList />\n            {currentTodo && (\n              <TodoModal />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}